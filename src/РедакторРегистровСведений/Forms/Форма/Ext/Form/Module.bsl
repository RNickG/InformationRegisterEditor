&НаСервере

Перем СтруктураРеквизитов, МассивРеквизитовРС, МассивЭлементовФормыРС;

#Область Обработчики_Событий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого РС из Метаданные.РегистрыСведений Цикл
		ЭтаФорма.Элементы.ИмяРС.СписокВыбора.Добавить(РС.Имя, РС.Имя + " ("+РС.Синоним+")" );
	КонецЦикла;
	
	ПустойМассив = Новый Массив;
	АдресХранилищаРеквизитовФормы = ПоместитьВоВременноеХранилище(ПустойМассив, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаЭлементовРеквизитовФормы = ПоместитьВоВременноеХранилище(ПустойМассив, ЭтаФорма.УникальныйИдентификатор);
	
	//ИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
КонецПроцедуры

&НаСервере
Процедура ИмяРСПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(ИмяРегистраСведений) Тогда
		ИницализироватьРеквизитыЭлементыФормы();
		ИнициализироватьСКД();
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРСПриИзменении(Элемент)
	ИмяРСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитПриИзменении(Элемент)
	РеквизитПриИзмененииНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОтбораНабораЗаписейПриИзменении(Элемент)
	Если Лев(Элемент.Имя, 16) = "__ЭлементОтбора_" Тогда
		ЭтаФорма["__РеквизитОтбораИспользование_" + Элемент.Заголовок] = Истина; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если не ЗавершениеРаботы = Неопределено Тогда 
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если не ЭтаФорма.ЗакрытьФорму Тогда
	
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтаФорма), "Закрыть Редактор регистров сведений?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗавершение(Ответ, Отказ = Истина) Экспорт
	Если Ответ = КодВозвратаДиалога.Да или Ответ = КодВозвратаДиалога.Таймаут Тогда
		ЭтаФорма.ЗакрытьФорму = Истина;
		Отказ = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокРСВыбор(ВыбраннаяСтрока, НомерСтроки, Поле, СтандартнаяОбработка)
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	КлючевыеПоля = Новый Структура;
	
	Для каждого КлючИЗначение из СтруктураРеквизитов.РеквизитыОтбора Цикл
		ЗначениеСвойства = Неопределено;
		КлючевыеПоля.Вставить(КлючИЗначение.Ключ,ВыбраннаяСтрока.ТекущиеДанные[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	МассивКлючевыеПоля = Новый Массив;
	МассивКлючевыеПоля.Добавить(КлючевыеПоля);	
	
	КлючЗаписи  = Новый("РегистрСведенийКлючЗаписи."+ИмяРегистраСведений,МассивКлючевыеПоля);
	
	
	ИмяРеквизита = Неопределено;
	
	Если СтруктураРеквизитов.ПоляСпискаХранилищаЗначения.Свойство(Поле.Имя, ИмяРеквизита) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючЗаписи", КлючЗаписи);
		ПараметрыФормы.Вставить("ИмяРеквизита", ИмяРеквизита);
		ПараметрыФормы.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
		ОткрытьФорму("ВнешняяОбработка.РедактроРегистровСведений.Форма.ФормаЗначениеХранилища",ПараметрыФормы ,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	Иначе
	
		ПараметрыФормыЗаписи = Новый Структура("Ключ", КлючЗаписи);
		ОткрытьФорму("РегистрСведений."+ИмяРегистраСведений+".ФормаЗаписи", ПараметрыФормыЗаписи);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Обработчики_Команд

&НаКлиенте
Процедура ПоказатьРезультатОтбора(Команда)
	ТабДок = ПоказатьРезультатОтбораНаСервере();
	ТабДок.Показать("Результат отбора");
КонецПроцедуры

&НаСервере
Функция ПоказатьРезультатОтбораНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	НаборЗаписей.Прочитать();
	
	ТабДанныхПоОтбору = НаборЗаписей.Выгрузить();
	
	Если ЕстьОтборСКД() Тогда
		ТабРезультат = ПолучитьТЗПоОтбору(ТабДанныхПоОтбору);
	Иначе
		ТабРезультат = ТабДанныхПоОтбору;
	КонецЕсли;
	      	
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРезультат);
	Построитель.ЗаполнитьНастройки();
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Построитель.Вывести(ТабДок);
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Если ВидОбработки = "Очистить" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтаФорма), "Удалить ВСЕ записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	ИначеЕсли ВидОбработки = "УдалитьПоОтбору" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьПоОтборуЗавершение", ЭтаФорма), "Удалить записи регистра по условиям отбора?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//ИначеЕсли ВидОбработки = "УдалитьВыбранные" Тогда
	//	
	//	Если Элементы["ЭлементСписокРС"].ВыделенныеСтроки.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьВыбранныеЗавершение", ЭтаФорма), "Удалить выбранные записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//	
	ИначеЕсли ВидОбработки = "ИзменитьПоОтбору" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьПоОтборуЗавершение", ЭтаФорма), "Изменнть записи регистра по условиям отбора?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//ИначеЕсли ВидОбработки = "ИзменитьВыбранные" Тогда
	//	
	//	Если Элементы["ЭлементСписокРС"].ВыделенныеСтроки.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВыбранныеЗавершение", ЭтаФорма), "Изменить выбранные записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//	
	ИначеЕсли ВидОбработки = "СоздатьЗапись" Тогда
		СоздатьЗаписьНаСервере();
		Элементы["ЭлементСписокРС"].Обновить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВсеВключить(Команда)
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для Каждого ИмяРеквизита из СтруктураРеквизитов.РеквизитыИспользование Цикл
		ЭтаФорма[ИмяРеквизита.Значение] = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВсеВыключить(Команда)
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для Каждого ИмяРеквизита из СтруктураРеквизитов.РеквизитыИспользование Цикл
		ЭтаФорма[ИмяРеквизита.Значение] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	Если Элементы["ЭлементСписокРС"].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для каждого КлючИЗначение из СтруктураРеквизитов.РеквизитыВСписке Цикл
		ЗначениеСвойства = Неопределено;
		ЭтаФорма[КлючИЗначение.Значение] = Элементы["ЭлементСписокРС"].ТекущиеДанные[КлючИЗначение.Ключ];
	КонецЦикла;
	
	Для каждого КлючИзначение из СтруктураРеквизитов.РеквизитыПароли Цикл
		ЭтаФорма[КлючИЗначение.Значение] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаполнитьПоТекущейСтроке(Команда)
	
	Если Элементы["ЭлементСписокРС"].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для каждого КлючИЗначение из СтруктураРеквизитов.РеквизитыОтбора Цикл
		ЗначениеСвойства = Неопределено;
		Если не Элементы["ЭлементСписокРС"].ТекущиеДанные.Свойство(КлючИЗначение.Ключ, ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;		
		ЭтаФорма[КлючИЗначение.Значение] = Элементы["ЭлементСписокРС"].ТекущиеДанные[КлючИЗначение.Ключ];
		ЭтаФорма[СтруктураРеквизитов.РеквизитыОтбораИспользование[КлючИЗначение.Ключ]] = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьРегистрНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоОтборуЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПоОтборуНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоОтборуЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПоОтборуНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	ПоказатьДиалогXML(Новый ОписаниеОповещения("ВыборФайлаВыгрузитьXMLЗавершение", ЭтотОбъект), РежимДиалогаВыбораФайла.Сохранение);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаВыгрузитьXMLЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВыгрузитьВXMLНаСервере(ВыбранныеФайлы[0]);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXMLПоОтбору(Команда)
	ПоказатьДиалогXML(Новый ОписаниеОповещения("ВыборФайлаВыгрузитьXMLПоОтборуЗавершение", ЭтотОбъект), РежимДиалогаВыбораФайла.Сохранение);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаВыгрузитьXMLПоОтборуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВыгрузитьВXMLПоОтборуНаСервере(ВыбранныеФайлы[0]);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзXML(Команда)
	ПоказатьДиалогXML(Новый ОписаниеОповещения("ВыборФайлаЗагрузитьXMLЗавершение", ЭтотОбъект), РежимДиалогаВыбораФайла.Открытие);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗагрузитьXMLЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ЗагрузитьИзXMLНаСервере(ВыбранныеФайлы[0]);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДаннымРегистра(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
	ОткрытьФорму("ВнешняяОбработка.РедактроРегистровСведений.Форма.ФормаОтчетПоДанным",ПараметрыФормы ,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры


#КонецОбласти

#Область Процедуры_Обработки_Данных


//&НаКлиенте
//Процедура УдалитьВыбранныеЗавершение(Ответ, Параметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСтрок = Новый Массив;
//	Для Каждого ВыдСтрока из Элементы["ЭлементСписокРС"].ВыделенныеСтроки Цикл
//		МассивСтрок.Добавить(Элементы["ЭлементСписокРС"].ДанныеСтроки(ВыдСтрока));
//	КонецЦикла;	
//	
//	УдалитьВыбранныеНаСервере(МассивСтрок);
//	
//	Элементы["ЭлементСписокРС"].Обновить();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ИзменитьВыбранныеЗавершение(Ответ, Параметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСтрок = Новый Массив;
//	Для Каждого ВыдСтрока из Элементы["ЭлементСписокРС"].ВыделенныеСтроки Цикл
//		МассивСтрок.Добавить(Элементы["ЭлементСписокРС"].ДанныеСтроки(ВыдСтрока));
//	КонецЦикла;	
//	
//	ИзменитьВыбранныеНаСервере(МассивСтрок);
//	
//	Элементы["ЭлементСписокРС"].Обновить();
//	
//КонецПроцедуры


&НаСервере
Процедура ОчиститьРегистрНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	Попытка
		НаборЗаписей.Записать();
		Сообщить("Регистр очищен.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПоОтборуНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	НаборЗаписей.Прочитать();
	
	Если ЕстьОтборСКД() Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
		
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
		
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
		
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
		Сообщить("Удаление записей по отбору звершено.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоОтборуНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	НовыйНаборЗаписей = Неопределено;
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений();
	
	ИзменяютсяСвойствОтбора = Ложь;
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		ЗначениеСвойства = Неопределено;
		Если СтруктураИспользуемыхЗначений.Свойство(ЭлементОтбора.Имя, ЗначениеСвойства) Тогда
			Если не ЭлементОтбора.Значение = ЗначениеСвойства Тогда
				ИзменяютсяСвойствОтбора = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтборСКД = ЕстьОтборСКД();
	
	
	НаборЗаписей.Прочитать();
	
	Если не ИзменяютсяСвойствОтбора и не ЕстьОтборСКД Тогда
		
		Для Каждого Запись из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИзменяютсяСвойствОтбора и не ЕстьОтборСКД Тогда
		ТЗНабора = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		Для Каждого Запись из ТЗНабора Цикл
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
		НовыйНаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
		ЗаполнитьОтборНабораЗаписей(НовыйНаборЗаписей);
		ЗаполнитьОтборНабораЗаписейПоСтруктуре(НовыйНаборЗаписей, СтруктураИспользуемыхЗначений);
		НовыйНаборЗаписей.Загрузить(ТЗНабора);
		
	ИначеЕсли не ИзменяютсяСвойствОтбора и ЕстьОтборСКД Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
					
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
				
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		Для Каждого Запись из ТЗНабора Цикл
			
			Если  ТЗПоОтбору.Найти(Запись.__УИД_строки, "__УИД_строки") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
		
	ИначеЕсли ИзменяютсяСвойствОтбора и ЕстьОтборСКД Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
		
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
		
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
	
		
		Для Каждого Запись из ТЗПоОтбору Цикл
			
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
		НовыйНаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
		ЗаполнитьОтборНабораЗаписей(НовыйНаборЗаписей);
		ЗаполнитьОтборНабораЗаписейПоСтруктуре(НовыйНаборЗаписей, СтруктураИспользуемыхЗначений);
		НовыйНаборЗаписей.Загрузить(ТЗПоОтбору);
		
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписей.Записать();
		
		Если не НовыйНаборЗаписей = Неопределено Тогда
			НовыйНаборЗаписей.Записать(Ложь);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		Сообщить("Изменение записей по отбору звершено.");
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

//&НаСервере
//Процедура УдалитьВыбранныеНаСервере(МассивСтрок)
//	
//	ЕстьОшибки = Ложь;
//	
//	НаборЗаписей = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();
//	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
//	
//	Для Каждого Стр из МассивСтрок Цикл
//		
//		Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл 
//			ЭлементОтбора.Значение = Стр[ЭлементОтбора.Имя];
//			ЭлементОтбора.Использование = Истина;
//		КонецЦикла;
//		
//		НаборЗаписей.Прочитать();
//		НаборЗаписей.Очистить();
//		
//		Попытка
//			НаборЗаписей.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			ЕстьОшибки = Истина;
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если не ЕстьОшибки Тогда
//		Сообщить("Удаление выделенных записей завершено.");
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ИзменитьВыбранныеНаСервере(МассивСтрок)
//	
//	ЕстьОшибки = Ложь;
//	
//	НаборЗаписей = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();
//	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
//	
//	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений();
//	
//	Для Каждого Стр из МассивСтрок Цикл
//		
//		Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл 
//			ЭлементОтбора.Значение = Стр[ЭлементОтбора.Имя];
//			ЭлементОтбора.Использование = Истина;
//		КонецЦикла;
//		
//		НаборЗаписей.Прочитать();
//		
//		Для Каждого  Запись Из НаборЗаписей Цикл
//			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
//		КонецЦикла;
//		
//		Попытка
//			НаборЗаписей.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			ЕстьОшибки = Истина;
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если не ЕстьОшибки Тогда
//		Сообщить("Изменение выделенных записей завершено.");
//	КонецЕсли;
//	
//КонецПроцедуры


&НаСервере
Процедура СоздатьЗаписьНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений(Истина);
	
	Запись = НаборЗаписей.Добавить();
	
	Если Метаданные.РегистрыСведений[ИмяРегистраСведений].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);	
	
	Попытка
		НаборЗаписей.Записать(Ложь);
		Сообщить("Запись создана.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Сервисные_процедуры

&НаСервере
Процедура ЗаполнитьОтборНабораЗаписей(НаборЗаписей)
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		Если ЭлементОтбора.Имя = "Регистратор" Тогда
			Если ЭтаФорма["__РеквизитИспользование_"+ЭлементОтбора.Имя] Тогда
				ЭлементОтбора.Значение = ЭтаФорма["__РеквизитРС_"+ЭлементОтбора.Имя];
			Иначе
				ЭлементОтбора.Значение = ЭтаФорма["__РеквизитОтбора_"+ЭлементОтбора.Имя];
			КонецЕсли;
		Иначе
			Если ЭтаФорма["__РеквизитОтбораИспользование_"+ЭлементОтбора.Имя] Тогда
				ЭлементОтбора.Значение = ЭтаФорма["__РеквизитОтбора_"+ЭлементОтбора.Имя];
				ЭлементОтбора.Использование = Истина;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборНабораЗаписейПоСтруктуре(НаборЗаписей, СтруктураЗначений)
	Перем ЗначениеСвойства;
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		Если СтруктураЗначений.Свойство(ЭлементОтбора.Имя, ЗначениеСвойства) Тогда
			ЭлементОтбора.Значение = ЗначениеСвойства;
			ЭлементОтбора.Использование = Истина;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруИспользуемыхЗначений(ДляСозданияЗаписи = Ложь)
	
	СтруктураИспользуемыхЗначений = Новый Структура;
	
	Для Каждого СтандартныйРеквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].СтандартныеРеквизиты Цикл
		
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Если не ДляСозданияЗаписи и не ЭтаФорма["__РеквизитИспользование_"+СтандартныйРеквизит.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИспользуемыхЗначений.Вставить(СтандартныйРеквизит.Имя, ЭтаФорма["__РеквизитРС_"+СтандартныйРеквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Измерение из Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения Цикл
		Если ЭтаФорма["__РеквизитИспользование_"+Измерение.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Измерение.Имя, ЭтаФорма["__РеквизитРС_"+Измерение.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс из Метаданные.РегистрыСведений[ИмяРегистраСведений].Ресурсы Цикл
		
		ЭтоХранилищеЗначения = Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения"));
		ЭтоПолеУИД = Ресурс.Тип.СодержитТип(Тип("УникальныйИдентификатор"));
		Если (ЭтоХранилищеЗначения или ЭтоПолеУИД) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтаФорма["__РеквизитИспользование_"+Ресурс.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Ресурс.Имя, ЭтаФорма["__РеквизитРС_"+Ресурс.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].Реквизиты Цикл
		ЭтоХранилищеЗначения = Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения"));
		ЭтоПолеУИД = Реквизит.Тип.СодержитТип(Тип("УникальныйИдентификатор"));
		Если (ЭтоХранилищеЗначения или ЭтоПолеУИД) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтаФорма["__РеквизитИспользование_"+Реквизит.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Реквизит.Имя, ЭтаФорма["__РеквизитРС_"+Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураИспользуемыхЗначений;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитФормыСвойство(ЭлементМетаданных, ЭлементГруппаСвойств)
	
	ЭтоХранилищеЗначения = ЭлементМетаданных.Тип.СодержитТип(Тип("ХранилищеЗначения"));
	ЭтоПолеПароля = ЭлементМетаданных.РежимПароля;
	ЭтоПолеУИД = ЭлементМетаданных.Тип.СодержитТип(Тип("УникальныйИдентификатор"));
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяРеквизита = "__РеквизитРС_"+ЭлементМетаданных.Имя;
	ИмяЭлемента = "__Элемент_"+ЭлементМетаданных.Имя;
	ИмяЭлементаСписка = "__ЭлементСписка_"+ЭлементМетаданных.Имя;
	ИмяГруппыЭлементов = "__Группа_"+ЭлементМетаданных.Имя;
	
	Если не (ЭтоХранилищеЗначения или ЭтоПолеУИД) Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ЭлементМетаданных.Тип));
	
		МассивРеквизитовРС.Добавить(ИмяРеквизита);
		
		ИмяРеквизитаИспользование = "__РеквизитИспользование_"+ЭлементМетаданных.Имя;
		ИмяЭлементаИспользование = "__ЭлементИспользование_"+ЭлементМетаданных.Имя;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаИспользование, Новый ОписаниеТипов("Булево"),,"Использовать"));
		МассивРеквизитовРС.Добавить(ИмяРеквизитаИспользование);
			
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );
		        	
		ГруппаЭлементов = ЭтаФорма.Элементы.Добавить(ИмяГруппыЭлементов, Тип("ГруппаФормы"), ЭлементГруппаСвойств);
		ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
		МассивЭлементовФормыРС.Добавить(ИмяГруппыЭлементов);
		
		НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаЭлементов);
		НовыйЭлементФормы.ПутьКДанным = ИмяРеквизита;
		НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.Заголовок = ЭлементМетаданных.Имя;
		НовыйЭлементФормы.УстановитьДействие("ПриИзменении","РеквизитПриИзменении");
		

		НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаИспользование, Тип("ПолеФормы"), ГруппаЭлементов);
		НовыйЭлементФормы.ПутьКДанным = ИмяРеквизитаИспользование;
		НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		СтруктураРеквизитов.РеквизитыИспользование.Вставить(ЭлементМетаданных.Имя, ИмяРеквизитаИспользование);
		
		СтруктураРеквизитов.РеквизитыВПоляхВвода.Вставить(ЭлементМетаданных.Имя, ИмяРеквизита);
	КонецЕсли;

	Если не (ЭтоХранилищеЗначения или ЭтоПолеУИД или ЭтоПолеПароля) Тогда
		СтруктураРеквизитов.РеквизитыВСписке.Вставить(ЭлементМетаданных.Имя, ИмяРеквизита);
	КонецЕсли;
	
	Если ЭтоХранилищеЗначения Тогда
		СтруктураРеквизитов.ПоляСпискаХранилищаЗначения.Вставить(ИмяЭлементаСписка,ЭлементМетаданных.Имя);
	КонецЕсли;
	
	Если ЭтоПолеПароля Тогда
		СтруктураРеквизитов.РеквизитыПароли.Вставить(ЭлементМетаданных.Имя,ИмяРеквизита);
	КонецЕсли;
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаСписка, Тип("ПолеФормы"), Элементы["ЭлементСписокРС"]);
	НовыйЭлементФормы.ПутьКДанным = "ДинамическийСписокРС."+ЭлементМетаданных.Имя;
	МассивЭлементовФормыРС.Добавить(ИмяЭлементаСписка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитФормыОтборНабораЗаписей(ЭлементОтбора)
	
	ЭлементГруппаСвойств = Элементы["ГруппаОтборНабораЗаписей"];

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяЭлементаОтбора = ЭлементОтбора.Имя;
	
	ИмяРеквизита = "__РеквизитОтбора_"+ИмяЭлементаОтбора;
	ИмяЭлемента = "__ЭлементОтбора_"+ИмяЭлементаОтбора;
	ИмяРеквизитаИспользование = "__РеквизитОтбораИспользование_"+ИмяЭлементаОтбора;
	ИмяЭлементаИспользование = "__ЭлементОтбораИспользование_"+ИмяЭлементаОтбора;
	ИмяГруппыЭлементов = "__ГруппаОтбора_"+ИмяЭлементаОтбора;
	
	// добваление реквизитов
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ЭлементОтбора.ТипЗначения));
	МассивРеквизитовРС.Добавить(ИмяРеквизита);
	СтруктураРеквизитов.РеквизитыОтбора.Вставить(ИмяЭлементаОтбора, ИмяРеквизита);
	СтруктураРеквизитов.РеквизитыОтбораИспользование.Вставить(ЭлементОтбора.Имя, ИмяРеквизитаИспользование);
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаИспользование, Новый ОписаниеТипов("Булево"),,"Использовать"));
	МассивРеквизитовРС.Добавить(ИмяРеквизитаИспользование);
		
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );
	
	// добавление элементов 
	
	ГруппаЭлементов = ЭтаФорма.Элементы.Добавить(ИмяГруппыЭлементов, Тип("ГруппаФормы"), ЭлементГруппаСвойств);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	МассивЭлементовФормыРС.Добавить(ИмяГруппыЭлементов);
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизита;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.Заголовок = ИмяЭлементаОтбора;
	НовыйЭлементФормы.УстановитьДействие("ПриИзменении","РеквизитОтбораНабораЗаписейПриИзменении");	
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаИспользование, Тип("ПолеФормы"), ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизитаИспользование;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	
	Если ИмяЭлементаОтбора = "Регистратор" Тогда
		ЭтаФорма[ИмяРеквизитаИспользование] = Истина;
		Элементы[ИмяЭлементаИспользование].Доступность = ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура РеквизитПриИзмененииНаСервере(ИмяЭлемента)
	ПутьКДанным = ЭтаФорма.Элементы[ИмяЭлемента].ПутьКДанным;
	Если ЗначениеЗаполнено(ЭтаФорма[ПутьКДанным]) Тогда
		
		СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
		
		Для каждого ЭлементСтруктуры из СтруктураРеквизитов.РеквизитыВПоляхВвода Цикл
			Если ЭлементСтруктуры.Значение = ПутьКДанным Тогда
				ИмяМетаданных = ЭлементСтруктуры.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма[СтруктураРеквизитов.РеквизитыИспользование[ИмяМетаданных]] = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	Элементы.ГруппаЭлементыРеквизитыРС.Видимость = ЗначениеЗаполнено(ИмяРегистраСведений);
КонецПроцедуры

&НаСервере
Процедура ИницализироватьРеквизитыЭлементыФормы()
	
	ТекстЗапроса  = "Выбрать 
	|%ПОЛЯ% 
	|Из РегистрСведений.%ИМЯРС% как РС";
	ПоляЗапроса = "";
	Для Каждого СтандартныйРеквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ПоляЗапроса = ПоляЗапроса + "РС."+СтандартныйРеквизит.Имя + ","+Символы.ПС;
	КонецЦикла;
	
	Для Каждого Измерение из Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения Цикл
		Если Не ДостпноИспользованиеРеквизита(Измерение) Тогда
			Продолжить;
		КонецЕсли;
		ПоляЗапроса = ПоляЗапроса + "РС."+Измерение.Имя + ","+Символы.ПС;
	КонецЦикла;
	
	Для Каждого Ресурс из Метаданные.РегистрыСведений[ИмяРегистраСведений].Ресурсы Цикл
		Если Не ДостпноИспользованиеРеквизита(Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		Если не Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Если не Ресурс.РежимПароля Тогда
				ПоляЗапроса = ПоляЗапроса + "РС."+Ресурс.Имя + ","+Символы.ПС;
			Иначе
				ПоляЗапроса = ПоляЗапроса + """<Пароль>"" КАК " + Ресурс.Имя + ","+Символы.ПС;
			КонецЕсли;
		Иначе
			ПоляЗапроса = ПоляЗапроса + """<Хранилище значения>"" КАК " + Ресурс.Имя + ","+Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].Реквизиты Цикл
		Если Не ДостпноИспользованиеРеквизита(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		Если не Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Если не Реквизит.РежимПароля Тогда
				ПоляЗапроса = ПоляЗапроса + "РС."+Реквизит.Имя + ","+Символы.ПС;
			Иначе
				ПоляЗапроса = ПоляЗапроса + """<Пароль>"" КАК " + Реквизит.Имя + ","+Символы.ПС;
			КонецЕсли;
		Иначе
			ПоляЗапроса = ПоляЗапроса + """<Хранилище значения>"" КАК " + Реквизит.Имя + ","+Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПоляЗапроса = Лев(ПоляЗапроса, СтрДлина(ПоляЗапроса) - 2);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЯ%", ПоляЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИМЯРС%", ИмяРегистраСведений);
		
	ЭтаФорма["ДинамическийСписокРС"].ПроизвольныйЗапрос = Истина;
	ЭтаФорма["ДинамическийСписокРС"].ТекстЗапроса = ТекстЗапроса;
	ЭтаФорма["ДинамическийСписокРС"].Порядок.Элементы.Очистить();
	ЭтаФорма["ДинамическийСписокРС"].Отбор.Элементы.Очистить();
	ЭтаФорма["ДинамическийСписокРС"].Группировка.Элементы.Очистить();

	//ЭлементСписокРС = ЭтаФорма.Элементы.Найти("ЭлементСписокРС");
	
	МассивЭлементовФормыРС = ПолучитьИзВременногоХранилища(АдресХранилищаЭлементовРеквизитовФормы);
	Для Каждого ЭлементФормы из МассивЭлементовФормыРС Цикл
		ЭтаФорма.Элементы.Удалить(ЭтаФорма.Элементы[ЭлементФормы]);
	КонецЦикла;	
	
	МассивРеквизитовРС = ПолучитьИзВременногоХранилища(АдресХранилищаРеквизитовФормы);
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитовРС);	

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("РеквизитыВСписке", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыВПоляхВвода", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыИспользование", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыОтбора", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыОтбораИспользование", Новый Структура);
	СтруктураРеквизитов.Вставить("ПоляСпискаХранилищаЗначения", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыПароли", Новый Структура);

	
	МассивРеквизитовРС = Новый Массив;
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивЭлементовФормыРС = Новый Массив;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		ДобавитьРеквизитФормыОтборНабораЗаписей(ЭлементОтбора);
	КонецЦикла;
	
	
	Для Каждого СтандартныйРеквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(СтандартныйРеквизит, Элементы["ГруппаСтандартныеРеквизиты"]);
	КонецЦикла;
	
	Для Каждого Измерение из Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения Цикл
		Если Не ДостпноИспользованиеРеквизита(Измерение) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(Измерение, Элементы["ГруппаИзмерения"]);
	КонецЦикла;
	
	Для Каждого Ресурс из Метаданные.РегистрыСведений[ИмяРегистраСведений].Ресурсы Цикл
		Если Не ДостпноИспользованиеРеквизита(Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(Ресурс, Элементы["ГруппаРесурсы"]);
	КонецЦикла;
	
	Для Каждого Реквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].Реквизиты Цикл
		Если Не ДостпноИспользованиеРеквизита(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(Реквизит, Элементы["ГруппаРеквизиты"]);
	КонецЦикла;

	АдресХранилищаРеквизитовФормы = ПоместитьВоВременноеХранилище(МассивРеквизитовРС, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаЭлементовРеквизитовФормы = ПоместитьВоВременноеХранилище(МассивЭлементовФормыРС, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаСтруктураРеквизитов = ПоместитьВоВременноеХранилище(СтруктураРеквизитов, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКД()
	
	НЗ = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	ТаблицаНЗ = НЗ.Выгрузить();
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИмяОбъекта = "ТЗ";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	
	Для Каждого Колонка из ТаблицаНЗ.Колонки Цикл
		ПолеНабораданных = НаборДанных.Поля.Добавить(тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораданных.ПутьКДанным = Колонка.Имя;
		ПолеНабораданных.ТипЗначения = Колонка.ТипЗначения;
		ПолеНабораданных.Поле = Колонка.Имя;
		ПолеНабораданных.Заголовок = Колонка.Имя;
		
		ВыбранноеПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
		ВыбранноеПоле.Использование = Истина;
	КонецЦикла;
	
	ПолеНабораданных = НаборДанных.Поля.Добавить(тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораданных.ПутьКДанным = "__УИД_Строки";
	ПолеНабораданных.ТипЗначения = Новый ОписаниеТипов("УникальныйИдентификатор");
	ПолеНабораданных.Поле = "__УИД_Строки";
	ПолеНабораданных.Заголовок = "УИД строки";
	ПолеНабораданных.ОграничениеИспользования.Условие = Истина;
	
	
	
	
	ДетальныеЗаписи = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Имя = "ДетальныеЗаписи";
	ДетальныеЗаписи.Использование = Истина;
	АвтоПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	//Для Каждого Элемент из НЗ.Отбор Цикл
	//	ОтборСКД = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	//	ОтборСКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	//	ОтборСКД.Использование = Ложь;
	//КонецЦикла;	
	
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СКД, ЭтаФорма);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
КонецПроцедуры

&НаСервере
Функция ЕстьОтборСКД()
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТЗПоОтбору(Знач ТЗ, ДляИзменения = Ложь)
	
		СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Если ДляИзменения Тогда
			ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("__УИД_Строки");
			ВыбранноеПоле.Использование = Истина;			
		КонецЕсли;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ВнешнийНаборДанных = Новый Структура;
		ВнешнийНаборДанных.Вставить("ТЗ",ТЗ); 
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешнийНаборДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТабРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТабРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	    Возврат ТабРезультат;
		
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуУИДСтроки(ТЗ)
	
	ТЗ.Колонки.Добавить("__УИД_строки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Для Каждого СтрТаб из ТЗ Цикл
	СтрТаб.__УИД_строки = Новый УникальныйИдентификатор;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзТаблицыПоУИД(ТЗДляУдаления, ТЗУдаляемыеСтроки)
	Для Каждого СтрТаб из ТЗУдаляемыеСтроки Цикл
	
		УдаляемаяСтрока = ТЗДляУдаления.Найти(СтрТаб.__УИД_строки, "__УИД_строки");
		
		Если не УдаляемаяСтрока = Неопределено Тогда
			ТЗДляУдаления.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторКода(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеРедактораКода",ЭтаФорма);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроизвольныйАлгоритм", ПроизвольныйАлгоритм);
	ОткрытьФорму("ВнешняяОбработка.РедактроРегистровСведений.Форма.ФормаРедакторКода",ПараметрыФормы ,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеРедактораКода(РезультатЗакрытия,ДопПараметры) Экспорт
	ПроизвольныйАлгоритм = РезультатЗакрытия.ПроизвольныйАлгоритм;
КонецПроцедуры

&НаСервере
Функция ДостпноИспользованиеРеквизита(Знач МетаданныеРеквизит)
	
	ВходитВСоставФО = Ложь;
	Для Каждого ФО из Метаданные.ФункциональныеОпции Цикл
		Если ФО.Состав.Содержит(МетаданныеРеквизит) Тогда
			ВходитВСоставФО = Истина;
			Если ПолучитьФункциональнуюОпцию(ФО.Имя) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если не ВходитВСоставФО Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаписатьЗначениеВXML(Значение, ЗаписьXML)
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	Сериализатор = СериализаторXDTO;
	
	Попытка 
		Сериализатор.ЗаписатьXML(ЗаписьXML, Значение);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:_1CV8DtUD
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ВыгрузитьВXMLНаСервере(ИмяФайла)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ РегистрСведений." + ИмяРегистраСведений+ " КАК ТаблицаОбъекта_" + ИмяРегистраСведений);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	НаборЗаписей.Прочитать();
	КоличествоЗаписей = НаборЗаписей.Количество();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	
	Если ЗаписатьЗначениеВXML(НаборЗаписей, ЗаписьXML) Тогда
		Сообщить("Выгрузка в XML завершена. Выгружено " + КоличествоЗаписей + " записей.",СтатусСообщения.Внимание);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзXMLНаСервере(ИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		Сообщить("Неверный формат файла выгрузки", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		Сообщить("Неверный формат файла выгрузки", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать() Тогда 
		Сообщить("Неверный формат файла выгрузки", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Сериализатор = СериализаторXDTO;
	
	Пока Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		Попытка
			НаборЗаписей = Сериализатор.ПрочитатьXML(ЧтениеXML);
			
			Если не ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей."+ИмяРегистраСведений) Тогда
				Сообщить("Тип загружаемых данных в файле не соответствует набору записей РС. Загрузка не выполнена.",СтатусСообщения.Внимание);
				ЧтениеXML.Закрыть();
				Возврат;
			КонецЕсли;
		
			Если ОбменДаннымиЗагрузка Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
		
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат
		КонецПопытки
		
	КонецЦикла;	
	
	ЧтениеXML.Закрыть();
	
	Сообщить("Загрузка из XML завершена.",СтатусСообщения.Внимание);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВXMLПоОтборуНаСервере(ИмяФайла)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	НаборЗаписей.Прочитать();
	
	Если ЕстьОтборСКД() Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
		
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗПоОтбору);
		
	КонецЕсли;
	
	КоличествоЗаписей = НаборЗаписей.Количество();
	
	Если КоличествоЗаписей = 0 Тогда
		Сообщить("Набор записей по отбору пустой, выгрузка записей по отбору не выполнена.");
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	
	Если ЗаписатьЗначениеВXML(НаборЗаписей, ЗаписьXML) Тогда
		Сообщить("Выгрузка в XML по отбору завершена. Выгружено " + КоличествоЗаписей + " записей.",СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогXML(ОписаниеОповещения, РежимДиалога)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = "Файл XML (*.xml)|*.xml";
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
КонецПроцедуры


#КонецОбласти
