&НаСервере

Перем СтруктураРеквизитов, МассивРеквизитовРС, МассивЭлементовФормыРС, ЭлементСписокРС;

#Область Обработчики_Событий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого РС из Метаданные.РегистрыСведений Цикл
		ЭтаФорма.Элементы.ИмяРС.СписокВыбора.Добавить(РС.Имя, РС.Имя + " ("+РС.Синоним+")" );
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ДинамическийСписокРС", Новый ОписаниеТипов("ДинамическийСписок"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементСписокРС = ЭтаФорма.Элементы.Вставить("ЭлементСписокРС", Тип("ТаблицаФормы"),ЭтаФорма.Элементы["ОсновнаяГруппа"], ЭтаФорма.Элементы["ГруппаЭлементыРеквизитыРС"]);
	ЭлементСписокРС.ПутьКДанным = "ДинамическийСписокРС";	
	
	ПустойМассив = Новый Массив;
	АдресХранилищаРеквизитовФормы = ПоместитьВоВременноеХранилище(ПустойМассив, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаЭлементовРеквизитовФормы = ПоместитьВоВременноеХранилище(ПустойМассив, ЭтаФорма.УникальныйИдентификатор);
	
	ИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
КонецПроцедуры

&НаСервере
Процедура ИмяРСПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(ИмяРегистраСведений) Тогда
		ИницализироватьРеквизитыЭлементыФормы();
		ИнициализироватьСКД();
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРСПриИзменении(Элемент)
	ИмяРСПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура РеквизитПриИзменении(Элемент)
	РеквизитПриИзмененииНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОтбораНабораЗаписейПриИзменении(Элемент)
	Если СтрНачинаетсяС(Элемент.Имя, "__ЭлементОтбора_") Тогда
		ЭтаФорма["__РеквизитОтбораИспользование_" + Элемент.Заголовок] = Истина; 
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если не ЭтаФорма.ЗакрытьФорму Тогда
	
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтаФорма), "Закрыть Редактор регистров сведений?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗавершение(Ответ, Отказ = Истина) Экспорт
	Если Ответ = КодВозвратаДиалога.Да или Ответ = КодВозвратаДиалога.Таймаут Тогда
		ЭтаФорма.ЗакрытьФорму = Истина;
		Отказ = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область Обработчики_Команд

&НаКлиенте
Процедура ПоказатьРезультатОтбора(Команда)
	ПоказатьРезультатОтбораНаСервере();
	ТабДок.Показать("Результат отбора");
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатОтбораНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	НаборЗаписей.Прочитать();
	
	ТабДанныхПоОтбору = НаборЗаписей.Выгрузить();
	
	Если ЕстьОтборСКД() Тогда
		ТабРезультат = ПолучитьТЗПоОтбору(ТабДанныхПоОтбору);
	Иначе
		ТабРезультат = ТабДанныхПоОтбору;
	КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРезультат);
	Построитель.ЗаполнитьНастройки();
	ТабДок.Очистить();
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Построитель.Вывести(ТабДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Если ВидОбработки = "Очистить" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтаФорма), "Удалить ВСЕ записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	ИначеЕсли ВидОбработки = "УдалитьПоОтбору" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьПоОтборуЗавершение", ЭтаФорма), "Удалить записи регистра по условиям отбора?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//ИначеЕсли ВидОбработки = "УдалитьВыбранные" Тогда
	//	
	//	Если Элементы["ЭлементСписокРС"].ВыделенныеСтроки.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьВыбранныеЗавершение", ЭтаФорма), "Удалить выбранные записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//	
	ИначеЕсли ВидОбработки = "ИзменитьПоОтбору" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьПоОтборуЗавершение", ЭтаФорма), "Изменнть записи регистра по условиям отбора?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//ИначеЕсли ВидОбработки = "ИзменитьВыбранные" Тогда
	//	
	//	Если Элементы["ЭлементСписокРС"].ВыделенныеСтроки.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВыбранныеЗавершение", ЭтаФорма), "Изменить выбранные записи регистра?", РежимДиалогаВопрос.ОКОтмена, 10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	//	
	ИначеЕсли ВидОбработки = "СоздатьЗапись" Тогда
		СоздатьЗаписьНаСервере();
		Элементы["ЭлементСписокРС"].Обновить();		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьВсеВключить(Команда)
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для Каждого ИмяРеквизита из СтруктураРеквизитов.РеквизитыИспользование Цикл
		ЭтаФорма[ИмяРеквизита.Значение] = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВсеВыключить(Команда)
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для Каждого ИмяРеквизита из СтруктураРеквизитов.РеквизитыИспользование Цикл
		ЭтаФорма[ИмяРеквизита.Значение] = Ложь;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	Если Элементы["ЭлементСписокРС"].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для каждого КлючИЗначение из СтруктураРеквизитов.РеквизитыВСписке Цикл
		ЭтаФорма[КлючИЗначение.Значение] = Элементы["ЭлементСписокРС"].ТекущиеДанные[КлючИЗначение.Ключ];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаполнитьПоТекущейСтроке(Команда)
	
	Если Элементы["ЭлементСписокРС"].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
	
	Для каждого КлючИЗначение из СтруктураРеквизитов.РеквизитыОтбора Цикл
		ЭтаФорма[КлючИЗначение.Значение] = Элементы["ЭлементСписокРС"].ТекущиеДанные[КлючИЗначение.Ключ];
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Процедура ОчиститьЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьРегистрНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоОтборуЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПоОтборуНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();	
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьПоОтборуЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПоОтборуНаСервере();
	
	Элементы["ЭлементСписокРС"].Обновить();	
	
КонецПроцедуры


//&НаКлиенте
//Процедура УдалитьВыбранныеЗавершение(Ответ, Параметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСтрок = Новый Массив;
//	Для Каждого ВыдСтрока из Элементы["ЭлементСписокРС"].ВыделенныеСтроки Цикл
//		МассивСтрок.Добавить(Элементы["ЭлементСписокРС"].ДанныеСтроки(ВыдСтрока));
//	КонецЦикла;	
//	
//	УдалитьВыбранныеНаСервере(МассивСтрок);
//	
//	Элементы["ЭлементСписокРС"].Обновить();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ИзменитьВыбранныеЗавершение(Ответ, Параметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСтрок = Новый Массив;
//	Для Каждого ВыдСтрока из Элементы["ЭлементСписокРС"].ВыделенныеСтроки Цикл
//		МассивСтрок.Добавить(Элементы["ЭлементСписокРС"].ДанныеСтроки(ВыдСтрока));
//	КонецЦикла;	
//	
//	ИзменитьВыбранныеНаСервере(МассивСтрок);
//	
//	Элементы["ЭлементСписокРС"].Обновить();
//	
//КонецПроцедуры


&НаСервере
Процедура ОчиститьРегистрНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	Попытка
		НаборЗаписей.Записать();
		Сообщить("Регистр очищен.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПоОтборуНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	НаборЗаписей.Прочитать();
	
	Если ЕстьОтборСКД() Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
		
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
		
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
		
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
		Сообщить("Удаление записей по отбору звершено.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоОтборуНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	НовыйНаборЗаписей = Неопределено;
	
	ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	
	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений();
	
	ИзменяютсяСвойствОтбора = Ложь;
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		ЗначениеСвойства = Неопределено;
		Если СтруктураИспользуемыхЗначений.Свойство(ЭлементОтбора.Имя, ЗначениеСвойства) Тогда
			Если не ЭлементОтбора.Значение = ЗначениеСвойства Тогда
				ИзменяютсяСвойствОтбора = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтборСКД = ЕстьОтборСКД();
	
	
	НаборЗаписей.Прочитать();
	
	Если не ИзменяютсяСвойствОтбора и не ЕстьОтборСКД Тогда
		
		Для Каждого Запись из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИзменяютсяСвойствОтбора и не ЕстьОтборСКД Тогда
		ТЗНабора = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		Для Каждого Запись из ТЗНабора Цикл
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
		НовыйНаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
		ЗаполнитьОтборНабораЗаписей(НовыйНаборЗаписей);
		ЗаполнитьОтборНабораЗаписейПоСтруктуре(НовыйНаборЗаписей, СтруктураИспользуемыхЗначений);
		НовыйНаборЗаписей.Загрузить(ТЗНабора);
		
	ИначеЕсли не ИзменяютсяСвойствОтбора и ЕстьОтборСКД Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
					
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
				
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		Для Каждого Запись из ТЗНабора Цикл
			
			Если  ТЗПоОтбору.Найти(Запись.__УИД_строки, "__УИД_строки") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
		
	ИначеЕсли ИзменяютсяСвойствОтбора и ЕстьОтборСКД Тогда
		
		ТЗНабора = НаборЗаписей.Выгрузить();
		
		ДобавитьКолонкуУИДСтроки(ТЗНабора);
		
		ТЗПоОтбору = ПолучитьТЗПоОтбору(ТЗНабора, Истина);
		
		УдалитьСтрокиИзТаблицыПоУИД(ТЗНабора, ТЗПоОтбору);
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(ТЗНабора);
	
		
		Для Каждого Запись из ТЗПоОтбору Цикл
			
			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
			Если ИспользоватьПроизвольныйАлгоритм Тогда
				Попытка
					Выполнить(ПроизвольныйАлгоритм);
				Исключение
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
		НовыйНаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
		ЗаполнитьОтборНабораЗаписей(НовыйНаборЗаписей);
		ЗаполнитьОтборНабораЗаписейПоСтруктуре(НовыйНаборЗаписей, СтруктураИспользуемыхЗначений);
		НовыйНаборЗаписей.Загрузить(ТЗПоОтбору);
		
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписей.Записать();
		
		Если не НовыйНаборЗаписей = Неопределено Тогда
			НовыйНаборЗаписей.Записать(Ложь);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		Сообщить("Изменение записей по отбору звершено.");
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

//&НаСервере
//Процедура УдалитьВыбранныеНаСервере(МассивСтрок)
//	
//	ЕстьОшибки = Ложь;
//	
//	НаборЗаписей = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();
//	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
//	
//	Для Каждого Стр из МассивСтрок Цикл
//		
//		Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл 
//			ЭлементОтбора.Значение = Стр[ЭлементОтбора.Имя];
//			ЭлементОтбора.Использование = Истина;
//		КонецЦикла;
//		
//		НаборЗаписей.Прочитать();
//		НаборЗаписей.Очистить();
//		
//		Попытка
//			НаборЗаписей.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			ЕстьОшибки = Истина;
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если не ЕстьОшибки Тогда
//		Сообщить("Удаление выделенных записей завершено.");
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ИзменитьВыбранныеНаСервере(МассивСтрок)
//	
//	ЕстьОшибки = Ложь;
//	
//	НаборЗаписей = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();
//	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
//	
//	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений();
//	
//	Для Каждого Стр из МассивСтрок Цикл
//		
//		Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл 
//			ЭлементОтбора.Значение = Стр[ЭлементОтбора.Имя];
//			ЭлементОтбора.Использование = Истина;
//		КонецЦикла;
//		
//		НаборЗаписей.Прочитать();
//		
//		Для Каждого  Запись Из НаборЗаписей Цикл
//			ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);
//		КонецЦикла;
//		
//		Попытка
//			НаборЗаписей.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			ЕстьОшибки = Истина;
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если не ЕстьОшибки Тогда
//		Сообщить("Изменение выделенных записей завершено.");
//	КонецЕсли;
//	
//КонецПроцедуры


&НаСервере
Процедура СоздатьЗаписьНаСервере()
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	СтруктураИспользуемыхЗначений = ПолучитьСтруктуруИспользуемыхЗначений(Истина);
	
	Запись = НаборЗаписей.Добавить();
	
	Если Метаданные.РегистрыСведений[ИмяРегистраСведений].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		ЗаполнитьОтборНабораЗаписей(НаборЗаписей);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураИспользуемыхЗначений);	
	
	Попытка
		НаборЗаписей.Записать(Ложь);
		Сообщить("Запись создана.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	
КонецПроцедуры

#Область Сервисные_процедуры

&НаСервере
Процедура ЗаполнитьОтборНабораЗаписей(НаборЗаписей)
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		Если ЭтаФорма["__РеквизитОтбораИспользование_"+ЭлементОтбора.Имя] Тогда
			ЭлементОтбора.Значение = ЭтаФорма["__РеквизитОтбора_"+ЭлементОтбора.Имя];
			ЭлементОтбора.Использование = Истина;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборНабораЗаписейПоСтруктуре(НаборЗаписей, СтруктураЗначений)
	Перем ЗначениеСвойства;
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		Если СтруктураЗначений.Свойство(ЭлементОтбора.Имя, ЗначениеСвойства) Тогда
			ЭлементОтбора.Значение = ЗначениеСвойства;
			ЭлементОтбора.Использование = Истина;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСтруктуруИспользуемыхЗначений(ДляСозданияЗаписи = Ложь)
	
	СтруктураИспользуемыхЗначений = Новый Структура;
	
	Для Каждого СтандартныйРеквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].СтандартныеРеквизиты Цикл
		
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Если не ДляСозданияЗаписи и не ЭтаФорма["__РеквизитИспользование_"+СтандартныйРеквизит.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИспользуемыхЗначений.Вставить(СтандартныйРеквизит.Имя, ЭтаФорма["__РеквизитРС_"+СтандартныйРеквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Измерение из Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения Цикл
		Если ЭтаФорма["__РеквизитИспользование_"+Измерение.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Измерение.Имя, ЭтаФорма["__РеквизитРС_"+Измерение.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс из Метаданные.РегистрыСведений[ИмяРегистраСведений].Ресурсы Цикл
		Если Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтаФорма["__РеквизитИспользование_"+Ресурс.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Ресурс.Имя, ЭтаФорма["__РеквизитРС_"+Ресурс.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтаФорма["__РеквизитИспользование_"+Реквизит.Имя] Тогда
			СтруктураИспользуемыхЗначений.Вставить(Реквизит.Имя, ЭтаФорма["__РеквизитРС_"+Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураИспользуемыхЗначений;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитФормыСвойство(ЭлементМетаданных, ЭлементГруппаСвойств, ЭтоХранилищеЗначения = Ложь)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяРеквизита = "__РеквизитРС_"+ЭлементМетаданных.Имя;
	ИмяЭлемента = "__Элемент_"+ЭлементМетаданных.Имя;
	ИмяЭлементаСписка = "__ЭлементСписка_"+ЭлементМетаданных.Имя;
	ИмяГруппыЭлементов = "__Группа_"+ЭлементМетаданных.Имя;
	
	Если ЭтоХранилищеЗначения Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов()));
		
	Иначе
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ЭлементМетаданных.Тип));
	КонецЕсли;
	
	МассивРеквизитовРС.Добавить(ИмяРеквизита);
	
	ИмяРеквизитаИспользование = "__РеквизитИспользование_"+ЭлементМетаданных.Имя;
	ИмяЭлементаИспользование = "__ЭлементИспользование_"+ЭлементМетаданных.Имя;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаИспользование, Новый ОписаниеТипов("Булево"),,"Использовать"));
	МассивРеквизитовРС.Добавить(ИмяРеквизитаИспользование);
		
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );
	
	
	ГруппаЭлементов = ЭтаФорма.Элементы.Добавить(ИмяГруппыЭлементов, Тип("ГруппаФормы"), ЭлементГруппаСвойств);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	МассивЭлементовФормыРС.Добавить(ИмяГруппыЭлементов);
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизита;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.Заголовок = ЭлементМетаданных.Имя;
	НовыйЭлементФормы.УстановитьДействие("ПриИзменении","РеквизитПриИзменении");
	

	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаИспользование, Тип("ПолеФормы"), ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизитаИспользование;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	СтруктураРеквизитов.РеквизитыИспользование.Вставить(ЭлементМетаданных.Имя, ИмяРеквизитаИспользование);
	
	
	Если не ЭтоХранилищеЗначения Тогда
		
		СтруктураРеквизитов.РеквизитыВСписке.Вставить(ЭлементМетаданных.Имя, ИмяРеквизита);	
		
		НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаСписка, Тип("ПолеФормы"), ЭлементСписокРС);
		НовыйЭлементФормы.ПутьКДанным = "ДинамическийСписокРС."+ЭлементМетаданных.Имя;
		МассивЭлементовФормыРС.Добавить(ИмяЭлементаСписка);
		
		СтруктураРеквизитов.РеквизитыВСписке.Вставить(ЭлементМетаданных.Имя, ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитФормыОтборНабораЗаписей(ЭлементОтбора)
	
	ЭлементГруппаСвойств = Элементы["ГруппаОтборНабораЗаписей"];

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяЭлементаОтбора = ЭлементОтбора.Имя;
	
	ИмяРеквизита = "__РеквизитОтбора_"+ИмяЭлементаОтбора;
	ИмяЭлемента = "__ЭлементОтбора_"+ИмяЭлементаОтбора;
	ИмяРеквизитаИспользование = "__РеквизитОтбораИспользование_"+ИмяЭлементаОтбора;
	ИмяЭлементаИспользование = "__ЭлементОтбораИспользование_"+ИмяЭлементаОтбора;
	ИмяГруппыЭлементов = "__ГруппаОтбора_"+ИмяЭлементаОтбора;
	
	// добваление реквизитов
	
	//Если ИмяЭлементаОтбора = "Период" Тогда
	//	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Дата, СтандартныйПериод")));
	//Иначе
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ЭлементОтбора.ТипЗначения));
	//КонецЕсли;
	МассивРеквизитовРС.Добавить(ИмяРеквизита);
	СтруктураРеквизитов.РеквизитыОтбора.Вставить(ИмяЭлементаОтбора, ИмяРеквизита);
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаИспользование, Новый ОписаниеТипов("Булево"),,"Использовать"));
	МассивРеквизитовРС.Добавить(ИмяРеквизитаИспользование);
		
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );
	
	// добавление элементов 
	
	ГруппаЭлементов = ЭтаФорма.Элементы.Добавить(ИмяГруппыЭлементов, Тип("ГруппаФормы"), ЭлементГруппаСвойств);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	МассивЭлементовФормыРС.Добавить(ИмяГруппыЭлементов);
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизита;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементФормы.Заголовок = ИмяЭлементаОтбора;
	НовыйЭлементФормы.УстановитьДействие("ПриИзменении","РеквизитОтбораНабораЗаписейПриИзменении");	
	
	НовыйЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлементаИспользование, Тип("ПолеФормы"), ГруппаЭлементов);
	НовыйЭлементФормы.ПутьКДанным = ИмяРеквизитаИспользование;
	НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
	
	Если ИмяЭлементаОтбора = "Регистратор" Тогда
		ЭтаФорма[ИмяРеквизитаИспользование] = Истина;
		Элементы[ИмяЭлементаИспользование].Доступность = ложь;
	КонецЕсли;
		
КонецПроцедуры




&НаСервере
Процедура РеквизитПриИзмененииНаСервере(ИмяЭлемента)
	ПутьКДанным = ЭтаФорма.Элементы[ИмяЭлемента].ПутьКДанным;
	Если ЗначениеЗаполнено(ЭтаФорма[ПутьКДанным]) Тогда
		
		СтруктураРеквизитов = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктураРеквизитов);
		
		Для каждого ЭлементСтруктуры из СтруктураРеквизитов.РеквизитыВСписке Цикл
			Если ЭлементСтруктуры.Значение = ПутьКДанным Тогда
				ИмяМетаданных = ЭлементСтруктуры.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//СтруктураРеквизитов.РеквизитыИспользование[ИмяМетаданных];
		
		ЭтаФорма[СтруктураРеквизитов.РеквизитыИспользование[ИмяМетаданных]] = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	Элементы.ГруппаЭлементыРеквизитыРС.Видимость = ЗначениеЗаполнено(ИмяРегистраСведений);
КонецПроцедуры

&НаСервере
Процедура ИницализироватьРеквизитыЭлементыФормы()
	
	
	ЭтаФорма["ДинамическийСписокРС"].ОсновнаяТаблица = "РегистрСведений."+ИмяРегистраСведений;
	ЭтаФорма["ДинамическийСписокРС"].Порядок.Элементы.Очистить();
	ЭтаФорма["ДинамическийСписокРС"].Отбор.Элементы.Очистить();
	ЭтаФорма["ДинамическийСписокРС"].Группировка.Элементы.Очистить();
	

	ЭлементСписокРС = ЭтаФорма.Элементы.Найти("ЭлементСписокРС");
	
	МассивЭлементовФормыРС = ПолучитьИзВременногоХранилища(АдресХранилищаЭлементовРеквизитовФормы);
	Для Каждого ЭлементФормы из МассивЭлементовФормыРС Цикл
		ЭтаФорма.Элементы.Удалить(ЭтаФорма.Элементы[ЭлементФормы]);
	КонецЦикла;	
	
	МассивРеквизитовРС = ПолучитьИзВременногоХранилища(АдресХранилищаРеквизитовФормы);
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитовРС);	

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("РеквизитыВСписке", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыИспользование", Новый Структура);
	СтруктураРеквизитов.Вставить("РеквизитыОтбора", Новый Структура);
	
	
	МассивРеквизитовРС = Новый Массив;
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивЭлементовФормыРС = Новый Массив;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		ДобавитьРеквизитФормыОтборНабораЗаписей(ЭлементОтбора);
	КонецЦикла;
	
	
	Для Каждого СтандартныйРеквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(СтандартныйРеквизит, Элементы["ГруппаСтандартныеРеквизиты"]);
	КонецЦикла;
	
	Для Каждого Измерение из Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения Цикл
		ДобавитьРеквизитФормыСвойство(Измерение, Элементы["ГруппаИзмерения"]);
	КонецЦикла;
	
	Для Каждого Ресурс из Метаданные.РегистрыСведений[ИмяРегистраСведений].Ресурсы Цикл
		ДобавитьРеквизитФормыСвойство(Ресурс, Элементы["ГруппаРесурсы"], Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения")));
	КонецЦикла;
	
	Для Каждого Реквизит из Метаданные.РегистрыСведений[ИмяРегистраСведений].Реквизиты Цикл
		Если Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьРеквизитФормыСвойство(Реквизит, Элементы["ГруппаРеквизиты"]);
	КонецЦикла;
	
	АдресХранилищаРеквизитовФормы = ПоместитьВоВременноеХранилище(МассивРеквизитовРС, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаЭлементовРеквизитовФормы = ПоместитьВоВременноеХранилище(МассивЭлементовФормыРС, ЭтаФорма.УникальныйИдентификатор);
	АдресХранилищаСтруктураРеквизитов = ПоместитьВоВременноеХранилище(СтруктураРеквизитов, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКД()
	
	НЗ = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	
	ТаблицаНЗ = НЗ.Выгрузить();
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИмяОбъекта = "ТЗ";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	
	Для Каждого Колонка из ТаблицаНЗ.Колонки Цикл
		ПолеНабораданных = НаборДанных.Поля.Добавить(тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораданных.ПутьКДанным = Колонка.Имя;
		ПолеНабораданных.ТипЗначения = Колонка.ТипЗначения;
		ПолеНабораданных.Поле = Колонка.Имя;
		ПолеНабораданных.Заголовок = Колонка.Имя;
		
		ВыбранноеПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
		ВыбранноеПоле.Использование = Истина;
	КонецЦикла;
	
	ПолеНабораданных = НаборДанных.Поля.Добавить(тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораданных.ПутьКДанным = "__УИД_Строки";
	ПолеНабораданных.ТипЗначения = Новый ОписаниеТипов("УникальныйИдентификатор");
	ПолеНабораданных.Поле = "__УИД_Строки";
	ПолеНабораданных.Заголовок = "УИД строки";
	ПолеНабораданных.ОграничениеИспользования.Условие = Истина;
	
	
	
	
	ДетальныеЗаписи = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Имя = "ДетальныеЗаписи";
	ДетальныеЗаписи.Использование = Истина;
	АвтоПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	//Для Каждого Элемент из НЗ.Отбор Цикл
	//	ОтборСКД = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	//	ОтборСКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	//	ОтборСКД.Использование = Ложь;
	//КонецЦикла;	
	
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СКД, ЭтаФорма);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
КонецПроцедуры

&НаСервере
Функция ЕстьОтборСКД()
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТЗПоОтбору(Знач ТЗ, ДляИзменения = Ложь)
	
		СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Если ДляИзменения Тогда
			ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("__УИД_Строки");
			ВыбранноеПоле.Использование = Истина;			
		КонецЕсли;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ВнешнийНаборДанных = Новый Структура;
		ВнешнийНаборДанных.Вставить("ТЗ",ТЗ); 
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешнийНаборДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТабРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТабРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	    Возврат ТабРезультат;
		
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуУИДСтроки(ТЗ)
	
	ТЗ.Колонки.Добавить("__УИД_строки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Для Каждого СтрТаб из ТЗ Цикл
	СтрТаб.__УИД_строки = Новый УникальныйИдентификатор;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзТаблицыПоУИД(ТЗДляУдаления, ТЗУдаляемыеСтроки)
	Для Каждого СтрТаб из ТЗУдаляемыеСтроки Цикл
	
		УдаляемаяСтрока = ТЗДляУдаления.Найти(СтрТаб.__УИД_строки, "__УИД_строки");
		
		Если не УдаляемаяСтрока = Неопределено Тогда
			ТЗДляУдаления.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

	

&НаКлиенте
Процедура ОткрытьРедакторКода(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеРедактораКода",ЭтаФорма);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроизвольныйАлгоритм", ПроизвольныйАлгоритм);
	ОткрытьФорму("ВнешняяОбработка.РедактроРегистровСведений.Форма.ФормаРедакторКода",ПараметрыФормы ,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ЗакрытиеРедактораКода(РезультатЗакрытия,ДопПараметры) Экспорт
	ПроизвольныйАлгоритм = РезультатЗакрытия.ПроизвольныйАлгоритм;
КонецПроцедуры


#КонецОбласти
